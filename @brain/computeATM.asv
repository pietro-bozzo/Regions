function this = computeATM(this,opt)
% computeATM Compute Avalanche Transition Matrix using IC activity from each region

arguments
  this (1,1) brain
  opt.threshold (1,1) double {mustBeNonnegative} = 0
  opt.restrict (:,2) double {mustBeNonnegative} = []
  opt.shuffle (1,1) {mustBeLogical} = false
end

% check avalanche threshold
if opt.threshold == 0
  if isempty(this.aval_threshold)
    error('computeATM:MissingThreshold',['Avalanche threshold must be specified when avalanches haven''t ' ...
      'been previously computed.']);
  end
else
  if ~isempty(this.aval_threshold) && opt.threshold ~= this.aval_threshold
    warning('Avalanche threshold was modified after avalanches were computed.');
  end
  this.aval_threshold = opt.threshold;
end
% store intervals on which to compute ATM
this.ATM_stamps{end+1,1} = opt.restrict;
% apply restriction
zscored_activity = abs(zscore(this.ICs_activity));
if ~isempty(opt.restrict)
  indeces = false(size(this.ICs_activity,1),1);
  for i = 1 : size(opt.restrict,1)
    indeces = indeces | (this.IC_time >= opt.restrict(i,1) & this.IC_time <= opt.restrict(i,2));
  end
  zscored_activity(~indeces,:) = 0;
end
% binarized IC activity
Z = (zscored_activity > this.aval_threshold).';
if opt.shuffle % shuffle activity matrix preserving inter-event interval per row
  Z = shuffleSpikeMatrix(Z); % IF RESTRICT HAS HOLES IN IT, IT SHOULD BE PASSED TO shuffleSpikeMatrix
end
% columns 2 to end of Z
X = reshape(Z(:,2:end),size(Z,1),1,size(Z,2)-1);
% columns 1 to end - 1 of Z
Y = reshape(Z(:,1:end-1),1,size(Z,1),size(Z,2)-1);
% Aijt = 1 iff Zi(t+1) = 1 and Zjt = 1
At = X.*Y;
% avalanches profile
profile = sum(Z,1).';
start = find([profile(1)~=0;profile(2:end)~=0&profile(1:end-1)==0]);
stop =  find([profile(2:end)==0&profile(1:end-1)~=0;profile(end)~=0]);
A = zeros(size(At,1),size(At,2),numel(start));
for i = 1 : numel(start)
  % Aijk: n of times Zi(t+1) = 1 when Zjt = 1 in aval k
  A(:,:,i) = sum(At(:,:,start(i):stop(i)-1),3);
  % Bj: number of times when Zjt = 1
  Bj = sum(Z(:,start(i):stop(i)-1),2).';
  A(:,:,i) = A(:,:,i) ./ repmat(Bj,numel(Bj),1);
end
this.ATMs{end+1,1} = mean(A,3,"omitnan");
this.ATMs{end} = this.ATMs{end};

% MAYBE FASTER METHOD, REQUIRES IMPLEMENTING ACCUMARRAY IN 3D
%profile = sum(Z,2); % avalanches profile  % CHECK DIM
%ind = [true;profile(2:end)~=0|profile(1:end-1)~=0]; % ind(i) = 0 if i is repeated zero
%A_clean = At(:,:,ind); % remove repeated zeros
% Aijk: n of times Zi(t+1) = 1 when Zjt = 1 in aval k
%A = accumarray(cumsum(A_clean==0)+(profile(1)~=0),A_clean);